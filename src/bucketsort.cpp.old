#include "../include/bucketsort.h"
#include "../include/mergeSort.h"

int range, *buckets, *counters;

void bucketsort_init(int n) {
    for(int i = 0; i < n; i++) {
        counters[i] = 0;
    }
}

void bucketsort_placement(int *input_array, int n, int p) {
    float tmp = (float)p/(float)n;
    for(int i = 0; i < n; i++) {
        int index = input_array[i] * tmp;
        buckets[index * n + counters[index]++] = input_array[i];
    }
}



void bucketsort(int *input_array, int n, int p) {
    range = n/p;
    buckets = (int *) _mm_malloc(n*p*sizeof(int), 32);
    counters = (int *) _mm_malloc(n*sizeof(int), 32);

    bucketsort_init(n);
    bucketsort_placement(input_array, n, p);

    for (int i = 0; i < p; i++){
        mergesort(&buckets[i*n], counters[i]);
    }

    for(int i = 0; i < p; i++) {
        for(int j = 0; j < counters[i]; j++) {
            cout << buckets[i * n + j] << endl;
        }
    }


}